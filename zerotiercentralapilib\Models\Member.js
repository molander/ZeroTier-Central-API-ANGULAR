/**
 * ZeroTierCentralAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Member
 *
 * @constructor
 */
angular.module('ZeroTierCentralAPILib')
    .factory('Member', ['BaseModel', 'Config11',
        function (BaseModel, Config11) {
            var Member = function (obj) {
                if (!obj) {
                    this.id = null;
                    this.type = null;
                    this.clock = null;
                    this.networkId = null;
                    this.nodeId = null;
                    this.controllerId = null;
                    this.hidden = null;
                    this.name = null;
                    this.description = null;
                    this.online = null;
                    this.lastOnline = null;
                    this.lastOffline = null;
                    this.physicalAddresses = null;
                    this.physicalAddress = null;
                    this.physicalLocation = null;
                    this.clientVersion = null;
                    this.protocolVersion = null;
                    this.supportsCircuitTesting = null;
                    this.supportsRulesEngine = null;
                    this.offlineNotifyDelay = null;
                    this.config = null;
                } else {
                    this.id = obj.id;
                    this.type = obj.type;
                    this.clock = obj.clock;
                    this.networkId = obj.networkId;
                    this.nodeId = obj.nodeId;
                    this.controllerId = obj.controllerId;
                    this.hidden = obj.hidden;
                    this.name = obj.name;
                    this.description = obj.description;
                    this.online = obj.online;
                    this.lastOnline = obj.lastOnline;
                    this.lastOffline = obj.lastOffline;
                    this.physicalAddresses = obj.physicalAddresses;
                    this.physicalAddress = obj.physicalAddress;
                    this.physicalLocation = obj.physicalLocation;
                    this.clientVersion = obj.clientVersion;
                    this.protocolVersion = obj.protocolVersion;
                    this.supportsCircuitTesting = obj.supportsCircuitTesting;
                    this.supportsRulesEngine = obj.supportsRulesEngine;
                    this.offlineNotifyDelay = obj.offlineNotifyDelay;
                    this.config = new Config11(obj.config);
                }
            }
    
            Member.prototype = new BaseModel();
            Member.prototype.constructor = Member;
        
            /**
             * Member record ID, which is formed from the network and node IDs [ro]
             *
             * @return {string|null}
             */
            Member.prototype.getId = function () {
                return this.id;
            };
        
            /**
             * Setter for Id
             * 
             * @param {string|null} value 
             */
            Member.prototype.setId = function (value) {
                this.id = value;
            };
        
            /**
             * Object type ("Member") [ro]
             *
             * @return {string|null}
             */
            Member.prototype.getType = function () {
                return this.type;
            };
        
            /**
             * Setter for Type
             * 
             * @param {string|null} value 
             */
            Member.prototype.setType = function (value) {
                this.type = value;
            };
        
            /**
             * System clock on server [ro]
             *
             * @return {double|null}
             */
            Member.prototype.getClock = function () {
                return this.clock;
            };
        
            /**
             * Setter for Clock
             * 
             * @param {double|null} value 
             */
            Member.prototype.setClock = function (value) {
                this.clock = value;
            };
        
            /**
             * 16-digit ZeroTier network ID [ro]
             *
             * @return {string|null}
             */
            Member.prototype.getNetworkId = function () {
                return this.networkId;
            };
        
            /**
             * Setter for NetworkId
             * 
             * @param {string|null} value 
             */
            Member.prototype.setNetworkId = function (value) {
                this.networkId = value;
            };
        
            /**
             * 10-digit ZeroTier node ID / device address [ro]
             *
             * @return {string|null}
             */
            Member.prototype.getNodeId = function () {
                return this.nodeId;
            };
        
            /**
             * Setter for NodeId
             * 
             * @param {string|null} value 
             */
            Member.prototype.setNodeId = function (value) {
                this.nodeId = value;
            };
        
            /**
             * 10-digit ZeroTier node ID of controller (same as first 10 digits of network ID) [ro]
             *
             * @return {string|null}
             */
            Member.prototype.getControllerId = function () {
                return this.controllerId;
            };
        
            /**
             * Setter for ControllerId
             * 
             * @param {string|null} value 
             */
            Member.prototype.setControllerId = function (value) {
                this.controllerId = value;
            };
        
            /**
             * Hidden in UI? [rw]
             *
             * @return {bool|null}
             */
            Member.prototype.getHidden = function () {
                return this.hidden;
            };
        
            /**
             * Setter for Hidden
             * 
             * @param {bool|null} value 
             */
            Member.prototype.setHidden = function (value) {
                this.hidden = value;
            };
        
            /**
             * Short name describing member [rw]
             *
             * @return {string|null}
             */
            Member.prototype.getName = function () {
                return this.name;
            };
        
            /**
             * Setter for Name
             * 
             * @param {string|null} value 
             */
            Member.prototype.setName = function (value) {
                this.name = value;
            };
        
            /**
             * Long form description [rw]
             *
             * @return {string|null}
             */
            Member.prototype.getDescription = function () {
                return this.description;
            };
        
            /**
             * Setter for Description
             * 
             * @param {string|null} value 
             */
            Member.prototype.setDescription = function (value) {
                this.description = value;
            };
        
            /**
             * Member is online? (has requested an update recently) [ro]
             *
             * @return {bool|null}
             */
            Member.prototype.getOnline = function () {
                return this.online;
            };
        
            /**
             * Setter for Online
             * 
             * @param {bool|null} value 
             */
            Member.prototype.setOnline = function (value) {
                this.online = value;
            };
        
            /**
             * Time member was last determined to be online [ro]
             *
             * @return {double|null}
             */
            Member.prototype.getLastOnline = function () {
                return this.lastOnline;
            };
        
            /**
             * Setter for LastOnline
             * 
             * @param {double|null} value 
             */
            Member.prototype.setLastOnline = function (value) {
                this.lastOnline = value;
            };
        
            /**
             * Time member was last determined to be offline [ro]
             *
             * @return {double|null}
             */
            Member.prototype.getLastOffline = function () {
                return this.lastOffline;
            };
        
            /**
             * Setter for LastOffline
             * 
             * @param {double|null} value 
             */
            Member.prototype.setLastOffline = function (value) {
                this.lastOffline = value;
            };
        
            /**
             * Array of most recently known physical addresses of member [ro]
             *
             * @return {array|null}
             */
            Member.prototype.getPhysicalAddresses = function () {
                return this.physicalAddresses;
            };
        
            /**
             * Setter for PhysicalAddresses
             * 
             * @param {array|null} value 
             */
            Member.prototype.setPhysicalAddresses = function (value) {
                this.physicalAddresses = value;
            };
        
            /**
             * Latest physical address of member [ro]
             *
             * @return {string|null}
             */
            Member.prototype.getPhysicalAddress = function () {
                return this.physicalAddress;
            };
        
            /**
             * Setter for PhysicalAddress
             * 
             * @param {string|null} value 
             */
            Member.prototype.setPhysicalAddress = function (value) {
                this.physicalAddress = value;
            };
        
            /**
             * Latitude and longitude of GeoIP-determined location of physicalAddress (if available) [ro]
             *
             * @return {object|null}
             */
            Member.prototype.getPhysicalLocation = function () {
                return this.physicalLocation;
            };
        
            /**
             * Setter for PhysicalLocation
             * 
             * @param {object|null} value 
             */
            Member.prototype.setPhysicalLocation = function (value) {
                this.physicalLocation = value;
            };
        
            /**
             * Most recent client software version [ro]
             *
             * @return {string|null}
             */
            Member.prototype.getClientVersion = function () {
                return this.clientVersion;
            };
        
            /**
             * Setter for ClientVersion
             * 
             * @param {string|null} value 
             */
            Member.prototype.setClientVersion = function (value) {
                this.clientVersion = value;
            };
        
            /**
             * Most recent client-reported ZeroTier protocol version [ro]
             *
             * @return {double|null}
             */
            Member.prototype.getProtocolVersion = function () {
                return this.protocolVersion;
            };
        
            /**
             * Setter for ProtocolVersion
             * 
             * @param {double|null} value 
             */
            Member.prototype.setProtocolVersion = function (value) {
                this.protocolVersion = value;
            };
        
            /**
             * True if member supports circuit testing [ro]
             *
             * @return {bool|null}
             */
            Member.prototype.getSupportsCircuitTesting = function () {
                return this.supportsCircuitTesting;
            };
        
            /**
             * Setter for SupportsCircuitTesting
             * 
             * @param {bool|null} value 
             */
            Member.prototype.setSupportsCircuitTesting = function (value) {
                this.supportsCircuitTesting = value;
            };
        
            /**
             * True if member supports the new (post-1.2) rules engine [ro]
             *
             * @return {bool|null}
             */
            Member.prototype.getSupportsRulesEngine = function () {
                return this.supportsRulesEngine;
            };
        
            /**
             * Setter for SupportsRulesEngine
             * 
             * @param {bool|null} value 
             */
            Member.prototype.setSupportsRulesEngine = function (value) {
                this.supportsRulesEngine = value;
            };
        
            /**
             * Notify of offline after this many milliseconds [rw]
             *
             * @return {double|null}
             */
            Member.prototype.getOfflineNotifyDelay = function () {
                return this.offlineNotifyDelay;
            };
        
            /**
             * Setter for OfflineNotifyDelay
             * 
             * @param {double|null} value 
             */
            Member.prototype.setOfflineNotifyDelay = function (value) {
                this.offlineNotifyDelay = value;
            };
        
            /**
             * TODO: Write general description for this method
             *
             * @return {Config11|null}
             */
            Member.prototype.getConfig = function () {
                return this.config;
            };
        
            /**
             * Setter for Config
             * 
             * @param {Config11|null} value 
             */
            Member.prototype.setConfig = function (value) {
                this.config = value;
            };
        
            return Member;
        }
    ]);

}(angular));
