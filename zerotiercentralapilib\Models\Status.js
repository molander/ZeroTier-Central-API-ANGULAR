/**
 * ZeroTierCentralAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Status
 *
 * @constructor
 */
angular.module('ZeroTierCentralAPILib')
    .factory('Status', ['BaseModel',
        function (BaseModel) {
            var Status = function (obj) {
                if (!obj) {
                    this.online = null;
                    this.clock = null;
                    this.version = null;
                    this.apiVersion = null;
                    this.uptime = null;
                    this.user = null;
                    this.stripePublishableKey = null;
                    this.paidPlans = null;
                    this.smsEnabled = null;
                    this.clusterNode = null;
                    this.loginMethods = null;
                    this.recaptchaSiteKey = null;
                    this.returnTo = null;
        
                    // Append to variable dictionary
                    this._variableDict['returnTo'] = 'return_to';
                } else {
                    this.online = obj.online;
                    this.clock = obj.clock;
                    this.version = obj.version;
                    this.apiVersion = obj.apiVersion;
                    this.uptime = obj.uptime;
                    this.user = obj.user;
                    this.stripePublishableKey = obj.stripePublishableKey;
                    this.paidPlans = obj.paidPlans;
                    this.smsEnabled = obj.smsEnabled;
                    this.clusterNode = obj.clusterNode;
                    this.loginMethods = obj.loginMethods;
                    this.recaptchaSiteKey = obj.recaptchaSiteKey;
                    this.returnTo = obj.return_to;
            
                    // Append to variable dictionary
                    this._variableDict['returnTo'] = 'return_to';
                }
            }
    
            Status.prototype = new BaseModel();
            Status.prototype.constructor = Status;
        
            /**
             * Always true
             *
             * @return {bool|null}
             */
            Status.prototype.getOnline = function () {
                return this.online;
            };
        
            /**
             * Setter for Online
             * 
             * @param {bool|null} value 
             */
            Status.prototype.setOnline = function (value) {
                this.online = value;
            };
        
            /**
             * Current server-side system clock (ms since epoch)
             *
             * @return {double|null}
             */
            Status.prototype.getClock = function () {
                return this.clock;
            };
        
            /**
             * Setter for Clock
             * 
             * @param {double|null} value 
             */
            Status.prototype.setClock = function (value) {
                this.clock = value;
            };
        
            /**
             * ZeroTier Central version
             *
             * @return {string|null}
             */
            Status.prototype.getVersion = function () {
                return this.version;
            };
        
            /**
             * Setter for Version
             * 
             * @param {string|null} value 
             */
            Status.prototype.setVersion = function (value) {
                this.version = value;
            };
        
            /**
             * ZeroTier Central API version
             *
             * @return {double|null}
             */
            Status.prototype.getApiVersion = function () {
                return this.apiVersion;
            };
        
            /**
             * Setter for ApiVersion
             * 
             * @param {double|null} value 
             */
            Status.prototype.setApiVersion = function (value) {
                this.apiVersion = value;
            };
        
            /**
             * This host's uptime in milliseconds
             *
             * @return {double|null}
             */
            Status.prototype.getUptime = function () {
                return this.uptime;
            };
        
            /**
             * Setter for Uptime
             * 
             * @param {double|null} value 
             */
            Status.prototype.setUptime = function (value) {
                this.uptime = value;
            };
        
            /**
             * Current user if authenticated, otherwise null
             *
             * @return {object|null}
             */
            Status.prototype.getUser = function () {
                return this.user;
            };
        
            /**
             * Setter for User
             * 
             * @param {object|null} value 
             */
            Status.prototype.setUser = function (value) {
                this.user = value;
            };
        
            /**
             * Publishable key for Stripe payment processor or null if not configured
             *
             * @return {string|null}
             */
            Status.prototype.getStripePublishableKey = function () {
                return this.stripePublishableKey;
            };
        
            /**
             * Setter for StripePublishableKey
             * 
             * @param {string|null} value 
             */
            Status.prototype.setStripePublishableKey = function (value) {
                this.stripePublishableKey = value;
            };
        
            /**
             * Available paid plans (if configured)
             *
             * @return {object|null}
             */
            Status.prototype.getPaidPlans = function () {
                return this.paidPlans;
            };
        
            /**
             * Setter for PaidPlans
             * 
             * @param {object|null} value 
             */
            Status.prototype.setPaidPlans = function (value) {
                this.paidPlans = value;
            };
        
            /**
             * True if SMS messaging is available
             *
             * @return {bool|null}
             */
            Status.prototype.getSmsEnabled = function () {
                return this.smsEnabled;
            };
        
            /**
             * Setter for SmsEnabled
             * 
             * @param {bool|null} value 
             */
            Status.prototype.setSmsEnabled = function (value) {
                this.smsEnabled = value;
            };
        
            /**
             * Name of current cluster node servicing this request
             *
             * @return {string|null}
             */
            Status.prototype.getClusterNode = function () {
                return this.clusterNode;
            };
        
            /**
             * Setter for ClusterNode
             * 
             * @param {string|null} value 
             */
            Status.prototype.setClusterNode = function (value) {
                this.clusterNode = value;
            };
        
            /**
             * Object containing login methods and whether they are available
             *
             * @return {object|null}
             */
            Status.prototype.getLoginMethods = function () {
                return this.loginMethods;
            };
        
            /**
             * Setter for LoginMethods
             * 
             * @param {object|null} value 
             */
            Status.prototype.setLoginMethods = function (value) {
                this.loginMethods = value;
            };
        
            /**
             * Recaptcha site key or null if not configured
             *
             * @return {string|null}
             */
            Status.prototype.getRecaptchaSiteKey = function () {
                return this.recaptchaSiteKey;
            };
        
            /**
             * Setter for RecaptchaSiteKey
             * 
             * @param {string|null} value 
             */
            Status.prototype.setRecaptchaSiteKey = function (value) {
                this.recaptchaSiteKey = value;
            };
        
            /**
             * Bounce destination if using Central as third party auth source (used for ZeroTier support login)
             *
             * @return {string|null}
             */
            Status.prototype.getReturnTo = function () {
                return this.returnTo;
            };
        
            /**
             * Setter for ReturnTo
             * 
             * @param {string|null} value 
             */
            Status.prototype.setReturnTo = function (value) {
                this.returnTo = value;
            };
        
            return Status;
        }
    ]);

}(angular));
