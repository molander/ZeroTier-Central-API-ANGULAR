/**
 * ZeroTierCentralAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of User
 *
 * @constructor
 */
angular.module('ZeroTierCentralAPILib')
    .factory('User', ['BaseModel', 'GlobalPermissions', 'Permissions',
        function (BaseModel, GlobalPermissions, Permissions) {
            var User = function (obj) {
                if (!obj) {
                    this.id = null;
                    this.type = null;
                    this.clock = null;
                    this.globalPermissions = null;
                    this.ui = null;
                    this.displayName = null;
                    this.email = null;
                    this.auth = null;
                    this.smsNumber = null;
                    this.tokens = null;
                    this.permissions = null;
                    this.subscriptions = null;
                } else {
                    this.id = obj.id;
                    this.type = obj.type;
                    this.clock = obj.clock;
                    this.globalPermissions = new GlobalPermissions(obj.globalPermissions);
                    this.ui = obj.ui;
                    this.displayName = obj.displayName;
                    this.email = obj.email;
                    this.auth = obj.auth;
                    this.smsNumber = obj.smsNumber;
                    this.tokens = obj.tokens;
                    this.permissions = new Permissions(obj.permissions);
                    this.subscriptions = obj.subscriptions;
                }
            }
    
            User.prototype = new BaseModel();
            User.prototype.constructor = User;
        
            /**
             * User ID (GUID) [ro]
             *
             * @return {string|null}
             */
            User.prototype.getId = function () {
                return this.id;
            };
        
            /**
             * Setter for Id
             * 
             * @param {string|null} value 
             */
            User.prototype.setId = function (value) {
                this.id = value;
            };
        
            /**
             * Object type [ro]
             *
             * @return {string|null}
             */
            User.prototype.getType = function () {
                return this.type;
            };
        
            /**
             * Setter for Type
             * 
             * @param {string|null} value 
             */
            User.prototype.setType = function (value) {
                this.type = value;
            };
        
            /**
             * Current system clock on server [ro]
             *
             * @return {double|null}
             */
            User.prototype.getClock = function () {
                return this.clock;
            };
        
            /**
             * Setter for Clock
             * 
             * @param {double|null} value 
             */
            User.prototype.setClock = function (value) {
                this.clock = value;
            };
        
            /**
             * TODO: Write general description for this method
             *
             * @return {GlobalPermissions|null}
             */
            User.prototype.getGlobalPermissions = function () {
                return this.globalPermissions;
            };
        
            /**
             * Setter for GlobalPermissions
             * 
             * @param {GlobalPermissions|null} value 
             */
            User.prototype.setGlobalPermissions = function (value) {
                this.globalPermissions = value;
            };
        
            /**
             * Arbitrary data that is stored and used by the UI [rw]
             *
             * @return {object|null}
             */
            User.prototype.getUi = function () {
                return this.ui;
            };
        
            /**
             * Setter for Ui
             * 
             * @param {object|null} value 
             */
            User.prototype.setUi = function (value) {
                this.ui = value;
            };
        
            /**
             * User display name [rw]
             *
             * @return {string|null}
             */
            User.prototype.getDisplayName = function () {
                return this.displayName;
            };
        
            /**
             * Setter for DisplayName
             * 
             * @param {string|null} value 
             */
            User.prototype.setDisplayName = function (value) {
                this.displayName = value;
            };
        
            /**
             * User e-mail [ro]
             *
             * @return {string|null}
             */
            User.prototype.getEmail = function () {
                return this.email;
            };
        
            /**
             * Setter for Email
             * 
             * @param {string|null} value 
             */
            User.prototype.setEmail = function (value) {
                this.email = value;
            };
        
            /**
             * Object containing one or more authentication types and login names or IDs [ro]
             *
             * @return {object|null}
             */
            User.prototype.getAuth = function () {
                return this.auth;
            };
        
            /**
             * Setter for Auth
             * 
             * @param {object|null} value 
             */
            User.prototype.setAuth = function (value) {
                this.auth = value;
            };
        
            /**
             * SMS telephone number for sending SMS notifications [rw]
             *
             * @return {string|null}
             */
            User.prototype.getSmsNumber = function () {
                return this.smsNumber;
            };
        
            /**
             * Setter for SmsNumber
             * 
             * @param {string|null} value 
             */
            User.prototype.setSmsNumber = function (value) {
                this.smsNumber = value;
            };
        
            /**
             * Array of API authentication tokens [rw]
             *
             * @return {array|null}
             */
            User.prototype.getTokens = function () {
                return this.tokens;
            };
        
            /**
             * Setter for Tokens
             * 
             * @param {array|null} value 
             */
            User.prototype.setTokens = function (value) {
                this.tokens = value;
            };
        
            /**
             * TODO: Write general description for this method
             *
             * @return {Permissions|null}
             */
            User.prototype.getPermissions = function () {
                return this.permissions;
            };
        
            /**
             * Setter for Permissions
             * 
             * @param {Permissions|null} value 
             */
            User.prototype.setPermissions = function (value) {
                this.permissions = value;
            };
        
            /**
             * Subscriptions by plan ID [ro]
             *
             * @return {object|null}
             */
            User.prototype.getSubscriptions = function () {
                return this.subscriptions;
            };
        
            /**
             * Setter for Subscriptions
             * 
             * @param {object|null} value 
             */
            User.prototype.setSubscriptions = function (value) {
                this.subscriptions = value;
            };
        
            return User;
        }
    ]);

}(angular));
