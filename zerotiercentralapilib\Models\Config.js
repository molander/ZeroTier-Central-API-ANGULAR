/**
 * ZeroTierCentralAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

;(function (angular) {
'use strict';

/**
 * Creates a instance of Config
 *
 * @constructor
 */
angular.module('ZeroTierCentralAPILib')
    .factory('Config', ['BaseModel',
        function (BaseModel) {
            var Config = function (obj) {
                if (!obj) {
                    this.id = null;
                    this.nwid = null;
                    this.name = null;
                    this.objtype = null;
                    this.mprivate = null;
                    this.creationTime = null;
                    this.revision = null;
                    this.lastModified = null;
                    this.multicastLimit = null;
                    this.routes = null;
                    this.rules = null;
                    this.tags = null;
                    this.capabilities = null;
                    this.totalMemberCount = null;
                    this.activeMemberCount = null;
                    this.authTokens = null;
                    this.authorizedMemberCount = null;
                    this.v4AssignMode = null;
                    this.v6AssignMode = null;
        
                    // Append to variable dictionary
                    this._variableDict['mprivate'] = 'private';
                } else {
                    this.id = obj.id;
                    this.nwid = obj.nwid;
                    this.name = obj.name;
                    this.objtype = obj.objtype;
                    this.mprivate = obj.private;
                    this.creationTime = obj.creationTime;
                    this.revision = obj.revision;
                    this.lastModified = obj.lastModified;
                    this.multicastLimit = obj.multicastLimit;
                    this.routes = obj.routes;
                    this.rules = obj.rules;
                    this.tags = obj.tags;
                    this.capabilities = obj.capabilities;
                    this.totalMemberCount = obj.totalMemberCount;
                    this.activeMemberCount = obj.activeMemberCount;
                    this.authTokens = obj.authTokens;
                    this.authorizedMemberCount = obj.authorizedMemberCount;
                    this.v4AssignMode = obj.v4AssignMode;
                    this.v6AssignMode = obj.v6AssignMode;
            
                    // Append to variable dictionary
                    this._variableDict['mprivate'] = 'private';
                }
            }
    
            Config.prototype = new BaseModel();
            Config.prototype.constructor = Config;
        
            /**
             * 16-digit ZeroTier network ID [ro]
             *
             * @return {string|null}
             */
            Config.prototype.getId = function () {
                return this.id;
            };
        
            /**
             * Setter for Id
             * 
             * @param {string|null} value 
             */
            Config.prototype.setId = function (value) {
                this.id = value;
            };
        
            /**
             * 16-digit ZeroTier network ID (for backward compatibility) [ro]
             *
             * @return {string|null}
             */
            Config.prototype.getNwid = function () {
                return this.nwid;
            };
        
            /**
             * Setter for Nwid
             * 
             * @param {string|null} value 
             */
            Config.prototype.setNwid = function (value) {
                this.nwid = value;
            };
        
            /**
             * Short name of network [rw]
             *
             * @return {string|null}
             */
            Config.prototype.getName = function () {
                return this.name;
            };
        
            /**
             * Setter for Name
             * 
             * @param {string|null} value 
             */
            Config.prototype.setName = function (value) {
                this.name = value;
            };
        
            /**
             * Object type on controller ("network") [ro]
             *
             * @return {string|null}
             */
            Config.prototype.getObjtype = function () {
                return this.objtype;
            };
        
            /**
             * Setter for Objtype
             * 
             * @param {string|null} value 
             */
            Config.prototype.setObjtype = function (value) {
                this.objtype = value;
            };
        
            /**
             * If true, certificate access control is enabled [rw]
             *
             * @return {bool|null}
             */
            Config.prototype.getPrivate = function () {
                return this.mprivate;
            };
        
            /**
             * Setter for Private
             * 
             * @param {bool|null} value 
             */
            Config.prototype.setPrivate = function (value) {
                this.mprivate = value;
            };
        
            /**
             * Time network was created on controller [ro]
             *
             * @return {double|null}
             */
            Config.prototype.getCreationTime = function () {
                return this.creationTime;
            };
        
            /**
             * Setter for CreationTime
             * 
             * @param {double|null} value 
             */
            Config.prototype.setCreationTime = function (value) {
                this.creationTime = value;
            };
        
            /**
             * Network revision number [ro]
             *
             * @return {double|null}
             */
            Config.prototype.getRevision = function () {
                return this.revision;
            };
        
            /**
             * Setter for Revision
             * 
             * @param {double|null} value 
             */
            Config.prototype.setRevision = function (value) {
                this.revision = value;
            };
        
            /**
             * Time config was last modified [ro]
             *
             * @return {double|null}
             */
            Config.prototype.getLastModified = function () {
                return this.lastModified;
            };
        
            /**
             * Setter for LastModified
             * 
             * @param {double|null} value 
             */
            Config.prototype.setLastModified = function (value) {
                this.lastModified = value;
            };
        
            /**
             * Max recipients per multicast or broadcast [rw]
             *
             * @return {double|null}
             */
            Config.prototype.getMulticastLimit = function () {
                return this.multicastLimit;
            };
        
            /**
             * Setter for MulticastLimit
             * 
             * @param {double|null} value 
             */
            Config.prototype.setMulticastLimit = function (value) {
                this.multicastLimit = value;
            };
        
            /**
             * Array of IP routes published to members [rw]
             *
             * @return {array|null}
             */
            Config.prototype.getRoutes = function () {
                return this.routes;
            };
        
            /**
             * Setter for Routes
             * 
             * @param {array|null} value 
             */
            Config.prototype.setRoutes = function (value) {
                this.routes = value;
            };
        
            /**
             * Network base rules table [rw]
             *
             * @return {array|null}
             */
            Config.prototype.getRules = function () {
                return this.rules;
            };
        
            /**
             * Setter for Rules
             * 
             * @param {array|null} value 
             */
            Config.prototype.setRules = function (value) {
                this.rules = value;
            };
        
            /**
             * Array of tags available on this network [rw]
             *
             * @return {array|null}
             */
            Config.prototype.getTags = function () {
                return this.tags;
            };
        
            /**
             * Setter for Tags
             * 
             * @param {array|null} value 
             */
            Config.prototype.setTags = function (value) {
                this.tags = value;
            };
        
            /**
             * Array of capabilities available on this network [rw]
             *
             * @return {array|null}
             */
            Config.prototype.getCapabilities = function () {
                return this.capabilities;
            };
        
            /**
             * Setter for Capabilities
             * 
             * @param {array|null} value 
             */
            Config.prototype.setCapabilities = function (value) {
                this.capabilities = value;
            };
        
            /**
             * Total number of members [ro]
             *
             * @return {double|null}
             */
            Config.prototype.getTotalMemberCount = function () {
                return this.totalMemberCount;
            };
        
            /**
             * Setter for TotalMemberCount
             * 
             * @param {double|null} value 
             */
            Config.prototype.setTotalMemberCount = function (value) {
                this.totalMemberCount = value;
            };
        
            /**
             * Number of active/online members [ro]
             *
             * @return {double|null}
             */
            Config.prototype.getActiveMemberCount = function () {
                return this.activeMemberCount;
            };
        
            /**
             * Setter for ActiveMemberCount
             * 
             * @param {double|null} value 
             */
            Config.prototype.setActiveMemberCount = function (value) {
                this.activeMemberCount = value;
            };
        
            /**
             * Array of authentication tokens for auto-authorizing new members [rw]
             *
             * @return {array|null}
             */
            Config.prototype.getAuthTokens = function () {
                return this.authTokens;
            };
        
            /**
             * Setter for AuthTokens
             * 
             * @param {array|null} value 
             */
            Config.prototype.setAuthTokens = function (value) {
                this.authTokens = value;
            };
        
            /**
             * Number of authorized members [ro]
             *
             * @return {double|null}
             */
            Config.prototype.getAuthorizedMemberCount = function () {
                return this.authorizedMemberCount;
            };
        
            /**
             * Setter for AuthorizedMemberCount
             * 
             * @param {double|null} value 
             */
            Config.prototype.setAuthorizedMemberCount = function (value) {
                this.authorizedMemberCount = value;
            };
        
            /**
             * Boolean toggles for IPv4 assignment modes [rw]
             *
             * @return {object|null}
             */
            Config.prototype.getV4AssignMode = function () {
                return this.v4AssignMode;
            };
        
            /**
             * Setter for V4AssignMode
             * 
             * @param {object|null} value 
             */
            Config.prototype.setV4AssignMode = function (value) {
                this.v4AssignMode = value;
            };
        
            /**
             * Boolean toggles for IPv6 assignment modes [rw]
             *
             * @return {object|null}
             */
            Config.prototype.getV6AssignMode = function () {
                return this.v6AssignMode;
            };
        
            /**
             * Setter for V6AssignMode
             * 
             * @param {object|null} value 
             */
            Config.prototype.setV6AssignMode = function (value) {
                this.v6AssignMode = value;
            };
        
            return Config;
        }
    ]);

}(angular));
